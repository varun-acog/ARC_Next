"use strict";(()=>{var e={};e.id=61,e.ids=[61],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3623:(e,o,r)=>{r.r(o),r.d(o,{originalPathname:()=>v,patchFetch:()=>f,requestAsyncStorage:()=>g,routeModule:()=>c,serverHooks:()=>m,staticGenerationAsyncStorage:()=>S});var t={};r.r(t),r.d(t,{POST:()=>d});var s=r(9303),n=r(8716),a=r(670),i=r(7070),l=r(8445);let p=process.env.LDAP_USERNAME,u=process.env.LDAP_PASSWORD;async function d(e){try{let o=await e.formData(),r=o.get("file"),t=o.get("template_type"),s=o.get("session_id");if(console.log("Upload For Review - Session ID:",s),!r)return console.log("Error: File is required"),i.NextResponse.json({error:"File is required"},{status:400});if(!t)return console.log("Error: Template type is required"),i.NextResponse.json({error:"Template type is required"},{status:400});if(!s)return console.log("Error: Session ID is required"),i.NextResponse.json({error:"Session ID is required"},{status:400});if(!p||!u)return console.log("Error: LDAP credentials are missing in environment variables"),i.NextResponse.json({error:"LDAP credentials are missing in environment variables"},{status:500});let n=`${p}:${u}`,a="Basic "+Buffer.from(n).toString("base64");console.log("Basic Auth header prepared (redacted for security)");let d=new FormData;d.append("file",r),d.append("template_type",t),d.append("session_id",s),console.log("Uploading review document to external endpoint...");let c=await fetch("https://demo-legal-llm-backend-1.hpc4.aganitha.ai/api/contracts/upload-for-review",{method:"POST",headers:{Accept:"application/json",Authorization:a},body:d});if(console.log("External endpoint response status:",c.status),!c.ok){let e=c.headers.get("Content-Type"),o="Failed to upload review document to external endpoint",r={};return o=e&&e.includes("application/json")?(r=await c.json()).error||o:`${o} (Status: ${c.status} ${c.statusText})`,console.log("External endpoint error details:",r),console.log("External endpoint error:",o),i.NextResponse.json({error:o,details:r},{status:c.status})}let g=await c.json();return console.log("External endpoint response:",g),(0,l.XG)(s,{reviewFile:r.name}),console.log("Upload For Review - Stored in session:",{sessionId:s,reviewFile:r.name}),i.NextResponse.json({message:"File uploaded successfully",session_id:s,filename:r.name},{status:200})}catch(e){return console.error("Upload error:",e.message),i.NextResponse.json({error:"Internal server error"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/contracts/upload-for-review/route",pathname:"/api/contracts/upload-for-review",filename:"route",bundlePath:"app/api/contracts/upload-for-review/route"},resolvedPagePath:"/Users/varun/work/ARC_Next/app/api/contracts/upload-for-review/route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:g,staticGenerationAsyncStorage:S,serverHooks:m}=c,v="/api/contracts/upload-for-review/route";function f(){return(0,a.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:S})}},8445:(e,o,r)=>{r.d(o,{XG:()=>n}),console.log("Initializing sessionStore module");let t=globalThis;t.__SESSION_STORE?console.log("Reusing existing session store from globalThis.__SESSION_STORE:",t.__SESSION_STORE):(console.log("Creating new session store in globalThis.__SESSION_STORE"),t.__SESSION_STORE={});let s=t.__SESSION_STORE;function n(e,o){s[e]||(s[e]={}),s[e]={...s[e],...o},console.log("Session Store Updated:",{sessionId:e,data:s[e]}),console.log("Current Session Store:",s)}}};var o=require("../../../../webpack-runtime.js");o.C(e);var r=e=>o(o.s=e),t=o.X(0,[276,972],()=>r(3623));module.exports=t})();