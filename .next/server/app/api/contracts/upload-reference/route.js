"use strict";(()=>{var e={};e.id=701,e.ids=[701],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7372:(e,o,r)=>{r.r(o),r.d(o,{originalPathname:()=>m,patchFetch:()=>_,requestAsyncStorage:()=>S,routeModule:()=>d,serverHooks:()=>f,staticGenerationAsyncStorage:()=>g});var s={};r.r(s),r.d(s,{POST:()=>u});var t=r(9303),n=r(8716),a=r(670),i=r(7070),l=r(8445);let c=process.env.LDAP_USERNAME,p=process.env.LDAP_PASSWORD;async function u(e){try{let o=await e.formData(),r=o.get("file"),s=o.get("session_id");if(console.log("Upload Reference - Session ID:",s),!r)return console.log("Error: File is required"),i.NextResponse.json({error:"File is required"},{status:400});if(!s)return console.log("Error: Session ID is required"),i.NextResponse.json({error:"Session ID is required"},{status:400});if(!c||!p)return console.log("Error: LDAP credentials are missing in environment variables"),i.NextResponse.json({error:"LDAP credentials are missing in environment variables"},{status:500});let t=`${c}:${p}`,n="Basic "+Buffer.from(t).toString("base64");console.log("Basic Auth header prepared (redacted for security)");let a=new FormData;a.append("file",r),a.append("session_id",s),console.log("Uploading reference document to external endpoint...");let u=await fetch("https://demo-legal-llm-backend-1.hpc4.aganitha.ai/api/contracts/upload-reference",{method:"POST",headers:{Accept:"application/json",Authorization:n},body:a});if(console.log("External endpoint response status:",u.status),!u.ok){let e=u.headers.get("Content-Type"),o="Failed to upload reference document to external endpoint",r={};return o=e&&e.includes("application/json")?(r=await u.json()).error||o:`${o} (Status: ${u.status} ${u.statusText})`,console.log("External endpoint error details:",r),console.log("External endpoint error:",o),i.NextResponse.json({error:o,details:r},{status:u.status})}let d=await u.json();return console.log("External endpoint response:",d),(0,l.XG)(s,{referenceFile:r.name}),console.log("Upload Reference - Stored in session:",{sessionId:s,referenceFile:r.name}),i.NextResponse.json({message:"Reference document uploaded successfully",session_id:s,filename:r.name},{status:200})}catch(e){return console.error("Upload error:",e.message),i.NextResponse.json({error:"Internal server error"},{status:500})}}let d=new t.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/contracts/upload-reference/route",pathname:"/api/contracts/upload-reference",filename:"route",bundlePath:"app/api/contracts/upload-reference/route"},resolvedPagePath:"/Users/varun/work/ARC_Next/app/api/contracts/upload-reference/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:S,staticGenerationAsyncStorage:g,serverHooks:f}=d,m="/api/contracts/upload-reference/route";function _(){return(0,a.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:g})}},8445:(e,o,r)=>{r.d(o,{XG:()=>n}),console.log("Initializing sessionStore module");let s=globalThis;s.__SESSION_STORE?console.log("Reusing existing session store from globalThis.__SESSION_STORE:",s.__SESSION_STORE):(console.log("Creating new session store in globalThis.__SESSION_STORE"),s.__SESSION_STORE={});let t=s.__SESSION_STORE;function n(e,o){t[e]||(t[e]={}),t[e]={...t[e],...o},console.log("Session Store Updated:",{sessionId:e,data:t[e]}),console.log("Current Session Store:",t)}}};var o=require("../../../../webpack-runtime.js");o.C(e);var r=e=>o(o.s=e),s=o.X(0,[276,972],()=>r(7372));module.exports=s})();